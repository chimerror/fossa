// Compiled by ClojureScript 1.9.89 {:static-fns true, :optimize-constants true}
goog.provide('phzr.impl.accessors.physics.arcade.body');
goog.require('cljs.core');
phzr.impl.accessors.physics.arcade.body.body_get_properties = cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$y,cljs.core.cst$kw$allow_DASH_rotation,cljs.core.cst$kw$dirty,cljs.core.cst$kw$mass,cljs.core.cst$kw$touching,cljs.core.cst$kw$rotation,cljs.core.cst$kw$enable,cljs.core.cst$kw$half_DASH_height,cljs.core.cst$kw$tile_DASH_padding,cljs.core.cst$kw$bottom,cljs.core.cst$kw$offset,cljs.core.cst$kw$speed,cljs.core.cst$kw$game,cljs.core.cst$kw$delta_DASH_max,cljs.core.cst$kw$moves,cljs.core.cst$kw$max_DASH_angular,cljs.core.cst$kw$overlap_DASH_y,cljs.core.cst$kw$skip_DASH_quad_DASH_tree,cljs.core.cst$kw$width,cljs.core.cst$kw$facing,cljs.core.cst$kw$overlap_DASH_x,cljs.core.cst$kw$type,cljs.core.cst$kw$new_DASH_velocity,cljs.core.cst$kw$source_DASH_width,cljs.core.cst$kw$custom_DASH_separate_DASH_y,cljs.core.cst$kw$angle,cljs.core.cst$kw$collide_DASH_world_DASH_bounds,cljs.core.cst$kw$source_DASH_height,cljs.core.cst$kw$gravity,cljs.core.cst$kw$center,cljs.core.cst$kw$sprite,cljs.core.cst$kw$immovable,cljs.core.cst$kw$bounce,cljs.core.cst$kw$half_DASH_width,cljs.core.cst$kw$prev,cljs.core.cst$kw$angular_DASH_acceleration,cljs.core.cst$kw$was_DASH_touching,cljs.core.cst$kw$right,cljs.core.cst$kw$position,cljs.core.cst$kw$embedded,cljs.core.cst$kw$angular_DASH_drag,cljs.core.cst$kw$x,cljs.core.cst$kw$pre_DASH_rotation,cljs.core.cst$kw$blocked,cljs.core.cst$kw$drag,cljs.core.cst$kw$friction,cljs.core.cst$kw$acceleration,cljs.core.cst$kw$custom_DASH_separate_DASH_x,cljs.core.cst$kw$angular_DASH_velocity,cljs.core.cst$kw$max_DASH_velocity,cljs.core.cst$kw$velocity,cljs.core.cst$kw$sync_DASH_bounds,cljs.core.cst$kw$height,cljs.core.cst$kw$allow_DASH_gravity,cljs.core.cst$kw$check_DASH_collision],["y","allowRotation","dirty","mass","touching","rotation","enable","halfHeight","tilePadding","bottom","offset","speed","game","deltaMax","moves","maxAngular","overlapY","skipQuadTree","width","facing","overlapX","type","newVelocity","sourceWidth","customSeparateY","angle","collideWorldBounds","sourceHeight","gravity","center","sprite","immovable","bounce","halfWidth","prev","angularAcceleration","wasTouching","right","position","embedded","angularDrag","x","preRotation","blocked","drag","friction","acceleration","customSeparateX","angularVelocity","maxVelocity","velocity","syncBounds","height","allowGravity","checkCollision"]);
phzr.impl.accessors.physics.arcade.body.body_set_properties = cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$y,cljs.core.cst$kw$allow_DASH_rotation,cljs.core.cst$kw$dirty,cljs.core.cst$kw$mass,cljs.core.cst$kw$touching,cljs.core.cst$kw$rotation,cljs.core.cst$kw$enable,cljs.core.cst$kw$tile_DASH_padding,cljs.core.cst$kw$offset,cljs.core.cst$kw$game,cljs.core.cst$kw$delta_DASH_max,cljs.core.cst$kw$moves,cljs.core.cst$kw$max_DASH_angular,cljs.core.cst$kw$overlap_DASH_y,cljs.core.cst$kw$skip_DASH_quad_DASH_tree,cljs.core.cst$kw$facing,cljs.core.cst$kw$overlap_DASH_x,cljs.core.cst$kw$type,cljs.core.cst$kw$custom_DASH_separate_DASH_y,cljs.core.cst$kw$collide_DASH_world_DASH_bounds,cljs.core.cst$kw$gravity,cljs.core.cst$kw$sprite,cljs.core.cst$kw$immovable,cljs.core.cst$kw$bounce,cljs.core.cst$kw$angular_DASH_acceleration,cljs.core.cst$kw$was_DASH_touching,cljs.core.cst$kw$embedded,cljs.core.cst$kw$angular_DASH_drag,cljs.core.cst$kw$x,cljs.core.cst$kw$blocked,cljs.core.cst$kw$drag,cljs.core.cst$kw$friction,cljs.core.cst$kw$acceleration,cljs.core.cst$kw$custom_DASH_separate_DASH_x,cljs.core.cst$kw$angular_DASH_velocity,cljs.core.cst$kw$max_DASH_velocity,cljs.core.cst$kw$velocity,cljs.core.cst$kw$sync_DASH_bounds,cljs.core.cst$kw$allow_DASH_gravity,cljs.core.cst$kw$check_DASH_collision],["y","allowRotation","dirty","mass","touching","rotation","enable","tilePadding","offset","game","deltaMax","moves","maxAngular","overlapY","skipQuadTree","facing","overlapX","type","customSeparateY","collideWorldBounds","gravity","sprite","immovable","bounce","angularAcceleration","wasTouching","embedded","angularDrag","x","blocked","drag","friction","acceleration","customSeparateX","angularVelocity","maxVelocity","velocity","syncBounds","allowGravity","checkCollision"]);
